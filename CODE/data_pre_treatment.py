import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os

cdir = os.getcwd()
datadir = cdir+'/database'

df = pd.read_csv(datadir+'/coorteeqsrafva.csv', sep=';', header=0, index_col=0)
print(df.head())
print(df.shape)

df = df.drop(columns=['ecg_id', 'patient_id', 'nurse', 'site', 'device', 'report', 'scp_codes', 'infarction_stadium1', 'infarction_stadium2', 'validated_by', 'second_opinion', 'initial_autogenerated_report', 'baseline_drift', 'static_noise', 'burst_noise', 'electrodes_problems', 'extra_beats', 'pacemaker', 'strat_fold', 'filename_lr', 'filename_hr'])

# dictionnaires des valeurs
ritmi_di = {'SR': 0, 'AF': 1, 'VA': 2}
validated_by_human_di = {False: 0, True: 1}
diagnosi_di = {'SR': 0, 'AFIB':1, 'STACH':2, 'SARRH':3, 'SBRAD':4, 'PACE':5, 'SVARR':6, 'BIGU':7, 'AFLT':8, 'SVTAC':9, 'PSVT':10, 'TRIGU':11}
heart_axis_di = {'Missing':0, 'LAD':1, 'AXL':2, 'MID':3, 'RAD':4, 'ALAD':5, 'AXR':6}
electrode = 0 #save signal from electrode 1


# remplace les valeures en lettres par des nombres selon les dicts ci dessus
df = df.replace({'ritmi': ritmi_di})
df = df.replace({'validated_by_human': validated_by_human_di})
df = df.replace({'diagnosi': diagnosi_di})
df = df.replace({'heart_axis': heart_axis_di})

#fill NaN
df.fillna({'age': df['age'].median(), 'height': df['height'].median(), 'weight': df['weight'].median()}, inplace=True)
df['age'] = df['age'].astype(np.int64)
df['height'] = df['height'].astype(np.int64)
df['weight'] = df['weight'].astype(np.int64)

df.to_csv(datadir+'/data.csv')

datafile = np.load(datadir+'/ecgeq-500hzsrfava.npy')
datafile = datafile[:,:,electrode]
print(f'saved only electrode {electrode}, shape of datafile: {datafile.shape}')

rdnum = int(np.random.random()*datafile.shape[0])
print(f'plotting line number {rdnum}')
#plt.plot(np.linspace(0,10,datafile.shape[1]),datafile[rdnum])
#plt.show()

##creating datafile with noise for training
def N(A,f,psi,tf=10,num_pts=5000):
  return A*np.sin(2*np.pi*f*np.linspace(0,tf,num_pts)+psi)

def Noise(x):
  #generates Powerline interference, Baseline Wander and Motion Artifact noises and adds them to x
  Api,Abw,Ama = 0.1+np.random.random(3)*0.4
  phi_pi,phi_bw,phi_ma = np.random.random(3)*2*np.pi-np.pi
  f_pi = 49.9+np.random.random(1)[0]*0.2
  f_bw = 0.0005+np.random.random(1)[0]*0.4995
  f_ma = 0.1+np.random.random(1)[0]*1000
  return x+N(Api,f_pi,phi_pi)+N(Abw,f_bw,phi_bw)+N(Ama,f_ma,phi_ma)

Noisy_datafile = []
for x in datafile:
  Noisy_datafile.append(list(Noise(x)))
Noisy_datafile = np.array(Noisy_datafile)

plt.plot(np.linspace(0,10,1000),Noisy_datafile[rdnum][:1000],label='ECG with noise')
plt.plot(np.linspace(0,10,1000),datafile[rdnum][:1000],label='clean_ecg')
plt.legend()
plt.title('Generated noise for VAE training')
plt.show()

np.save(datadir+'/clean_ecg.npy',datafile)
np.save(datadir+'/noisy_ecg.npy',Noisy_datafile)
